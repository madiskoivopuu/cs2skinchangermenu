#include "pch.h"
#include "components.h"

#include "gui/gui_setup.h"
#include "gui/gui_main.h"
#include "skin_changer/skins_cache.h"

#include "nuklear-gui/nuklear.h"

enum class Window : int {
    SkinsList,
    SingleSkinSettings
};
struct {
    Window currActiveWindow = Window::SkinsList;
} windowState;

TextureCache plusSymbol({
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x78,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x84, 0xA9, 0xA2, 0xE2, 0x00, 0x00, 0x00,
	0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
	0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC,
	0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
	0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00,
	0x00, 0x03, 0x2B, 0x49, 0x44, 0x41, 0x54, 0x78, 0x5E, 0xED, 0xDD, 0x4D,
	0x4E, 0xDB, 0x40, 0x18, 0x80, 0x61, 0xA0, 0x7F, 0xA9, 0xD4, 0x05, 0x1B,
	0x2E, 0xC0, 0x15, 0x58, 0x65, 0xC7, 0x96, 0x03, 0x58, 0xCA, 0x29, 0x38,
	0x0C, 0xA7, 0x88, 0xC4, 0x01, 0xD8, 0x72, 0x01, 0xAE, 0xC0, 0x05, 0x58,
	0xB1, 0xA3, 0xA5, 0x84, 0x7A, 0xA2, 0xA1, 0x72, 0x89, 0x93, 0xB8, 0x52,
	0x9B, 0x99, 0xCF, 0x79, 0x1E, 0x09, 0xD9, 0xD9, 0x11, 0xCF, 0x6B, 0x7B,
	0x1C, 0x4C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0xDF, 0x61, 0x5E, 0xD2, 0xE3, 0xEA, 0xEA, 0xEA, 0x35, 0xAF,
	0xEE, 0xCC, 0xE5, 0xE5, 0xA5, 0x31, 0x19, 0xE8, 0x28, 0x2F, 0x21, 0x1C,
	0xF1, 0x12, 0x96, 0x78, 0x09, 0x4B, 0xBC, 0x84, 0x25, 0x5E, 0xC2, 0x12,
	0x2F, 0x61, 0x89, 0x97, 0xB0, 0xC4, 0x4B, 0x58, 0xE2, 0x25, 0x2C, 0xF1,
	0x12, 0x96, 0x78, 0x09, 0x4B, 0xBC, 0x84, 0x25, 0xDE, 0x0A, 0x35, 0x4D,
	0xF3, 0x21, 0xAF, 0xB2, 0x81, 0x78, 0x2B, 0x74, 0x7D, 0x7D, 0xFD, 0x92,
	0x57, 0xD9, 0x40, 0xBC, 0xF5, 0x49, 0x63, 0x32, 0x74, 0x5C, 0xF6, 0xFA,
	0xF6, 0x49, 0xF1, 0xD6, 0x67, 0x91, 0x97, 0x43, 0xEC, 0xFC, 0x7E, 0xE3,
	0x9A, 0x88, 0xB7, 0x3E, 0x69, 0x4C, 0xFE, 0x26, 0xE0, 0xBD, 0x25, 0xDE,
	0x77, 0x66, 0xB3, 0xD9, 0x61, 0xFA, 0xC9, 0x2F, 0x4B, 0x10, 0xEE, 0x40,
	0xE2, 0xED, 0xE8, 0x44, 0x5B, 0x2C, 0xDE, 0xF3, 0xF3, 0xF3, 0x8F, 0x79,
	0x95, 0x2D, 0xFC, 0xBF, 0xD4, 0xAA, 0xB4, 0x4D, 0x96, 0x73, 0x49, 0xFF,
	0xC3, 0x56, 0x37, 0x47, 0xDE, 0x55, 0x7B, 0x7D, 0x11, 0x14, 0x89, 0x78,
	0x3B, 0xF2, 0x29, 0x3B, 0x6D, 0x93, 0x62, 0xDB, 0xA5, 0x69, 0x9A, 0xAF,
	0x79, 0x95, 0x2D, 0xC4, 0xDB, 0x71, 0x7B, 0x7B, 0xFB, 0x33, 0xAF, 0xA6,
	0xF9, 0xAF, 0x6D, 0x53, 0x39, 0x03, 0xB4, 0x6A, 0xD1, 0x1E, 0xFD, 0xD2,
	0xBC, 0xB3, 0xC8, 0x85, 0xD3, 0xD3, 0xD3, 0x93, 0x39, 0xEF, 0x40, 0xE2,
	0xED, 0x91, 0xFE, 0x3C, 0x3B, 0x9F, 0xCF, 0x7F, 0xE4, 0x97, 0x3B, 0x35,
	0x99, 0x4C, 0x7E, 0x1F, 0xFD, 0xD9, 0x4C, 0xBC, 0xAB, 0x8A, 0x6E, 0x93,
	0x76, 0xC7, 0x29, 0xB2, 0xD3, 0x44, 0x24, 0xDE, 0x55, 0x69, 0xDA, 0xF0,
	0xB9, 0x9D, 0xF3, 0x16, 0x99, 0x36, 0x4C, 0xA7, 0x53, 0x17, 0x6C, 0x03,
	0x89, 0xB7, 0xDF, 0xCB, 0xE3, 0xE3, 0x63, 0x91, 0xDB, 0x12, 0x8F, 0x8F,
	0x8F, 0xD3, 0xCE, 0xF3, 0x2D, 0xBF, 0x64, 0x03, 0x17, 0x07, 0x1B, 0xF8,
	0x23, 0x45, 0xDD, 0x42, 0x6D, 0xA8, 0x12, 0x31, 0xED, 0x8B, 0x88, 0x3B,
	0x8D, 0x69, 0x03, 0x61, 0x89, 0x97, 0xB0, 0xC4, 0x4B, 0x58, 0xE2, 0x25,
	0x2C, 0xF1, 0x12, 0x96, 0x78, 0x09, 0x4B, 0xBC, 0x84, 0x25, 0x5E, 0xC2,
	0x12, 0x2F, 0x61, 0x89, 0x97, 0xB0, 0xC4, 0x4B, 0x58, 0xE2, 0x25, 0x2C,
	0xF1, 0x12, 0x96, 0x78, 0x09, 0x4B, 0xBC, 0x84, 0x25, 0x5E, 0xC2, 0x12,
	0x2F, 0x61, 0x89, 0x97, 0xB0, 0xC4, 0x4B, 0x58, 0xE2, 0x25, 0x2C, 0xF1,
	0x12, 0x96, 0x78, 0x09, 0x4B, 0xBC, 0x84, 0x25, 0x5E, 0xC2, 0x12, 0x2F,
	0x61, 0x89, 0x97, 0xB0, 0x7C, 0x2F, 0xD6, 0x06, 0xBE, 0xAB, 0xAC, 0x6E,
	0x8E, 0xBC, 0x1D, 0xE9, 0x99, 0x14, 0xE9, 0xEB, 0x4D, 0xCF, 0xCE, 0xCE,
	0x3E, 0x45, 0x7D, 0xA4, 0x54, 0xFB, 0xFB, 0x2F, 0xBF, 0xDD, 0x32, 0x2F,
	0x8F, 0xC6, 0xFC, 0x68, 0x2C, 0xF1, 0x76, 0xA4, 0x67, 0x52, 0x3C, 0x3C,
	0x3C, 0x2C, 0xEE, 0xEE, 0xEE, 0x9E, 0xBB, 0xCF, 0xA7, 0x88, 0xE2, 0x2D,
	0xDC, 0xB4, 0xF3, 0xB5, 0xEF, 0x63, 0x79, 0x04, 0x8F, 0xF8, 0x3E, 0x86,
	0x12, 0xEF, 0x3B, 0x69, 0xB0, 0x2F, 0x2E, 0x2E, 0xBE, 0xE4, 0x97, 0xA1,
	0xA4, 0xC7, 0x11, 0xA4, 0x9F, 0x76, 0xE7, 0x7B, 0x39, 0x39, 0x39, 0x79,
	0x6D, 0x63, 0x7E, 0x9B, 0x82, 0x8C, 0x72, 0x2A, 0x22, 0xDE, 0x1E, 0x37,
	0x37, 0x37, 0xDF, 0x67, 0xB3, 0xD9, 0x24, 0xBF, 0x0C, 0xAB, 0x0D, 0x39,
	0x3D, 0x0A, 0x36, 0x8D, 0xF1, 0x28, 0xBF, 0x1A, 0x56, 0xBC, 0x3D, 0xF2,
	0x3C, 0x31, 0xF2, 0x80, 0x2F, 0xD2, 0x11, 0xB8, 0x5D, 0xA6, 0xF7, 0x30,
	0xDA, 0x67, 0x19, 0x8B, 0xB7, 0x47, 0x3A, 0xE5, 0xE6, 0xD5, 0x9D, 0x4B,
	0x17, 0x8C, 0x79, 0x95, 0x2D, 0xC4, 0xDB, 0x2F, 0x5D, 0xF8, 0x14, 0xB9,
	0xD0, 0xB9, 0xBF, 0xBF, 0x1F, 0xE5, 0x29, 0xFE, 0x7F, 0x10, 0x6F, 0xBF,
	0x74, 0xCA, 0x2D, 0xE2, 0xF4, 0xF4, 0x74, 0xB4, 0x1F, 0x6D, 0xFD, 0x6B,
	0xE2, 0xED, 0xD1, 0xCE, 0x17, 0x5F, 0xE7, 0xF3, 0x79, 0xA9, 0x80, 0x3D,
	0x87, 0x6D, 0x20, 0xF1, 0xAE, 0x51, 0xEA, 0xD9, 0xC3, 0x69, 0xC7, 0xC9,
	0xAB, 0x6C, 0x21, 0xDE, 0x35, 0xDA, 0x23, 0xEF, 0x68, 0xAF, 0xD2, 0xC7,
	0x42, 0xBC, 0xFD, 0x84, 0x1B, 0x80, 0x78, 0xEB, 0x63, 0xDA, 0x30, 0x90,
	0x78, 0x2B, 0xD3, 0x34, 0x8D, 0x31, 0x19, 0xC8, 0x86, 0x5A, 0xB5, 0xBC,
	0x0F, 0xA0, 0xBD, 0x60, 0x2B, 0x72, 0x3F, 0x80, 0x0B, 0xB6, 0xE1, 0xC4,
	0xBB, 0x6A, 0x19, 0x4F, 0x7B, 0xC1, 0x56, 0x24, 0xA2, 0xCE, 0xCD, 0x34,
	0x6C, 0x21, 0xDE, 0xCA, 0xE4, 0x7B, 0x12, 0x04, 0x3C, 0x80, 0x78, 0xEB,
	0x64, 0xEA, 0x30, 0x80, 0x78, 0xEB, 0x93, 0xC6, 0xC4, 0xB8, 0x0C, 0x60,
	0x23, 0xAD, 0x57, 0xF2, 0xD4, 0x9D, 0x3E, 0x67, 0x36, 0x75, 0xD8, 0x42,
	0xBC, 0xEB, 0x95, 0x8A, 0xE7, 0x6D, 0xCA, 0x60, 0xEA, 0xB0, 0x85, 0x78,
	0xD7, 0x2B, 0xB5, 0x6D, 0x44, 0x3B, 0x90, 0x78, 0xD7, 0x73, 0xDA, 0xAE,
	0x9C, 0x78, 0xD7, 0x7B, 0xCE, 0x4B, 0x2A, 0x25, 0x5E, 0xC2, 0x12, 0x2F,
	0x61, 0x89, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x07, 0x07, 0xBF, 0x00, 0xB3, 0x16,
	0xA7, 0x56, 0xA6, 0x96, 0x06, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
	0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
});

void DrawSingleSkinSettings() {

}

void DrawSkinsOverview() {
    if (nk_group_begin(gui::nuklearCtx, "sbar", 0)) {
        // 5 rectangular items per row
        float skinPrefBoxSize = (0.75f * nk_window_get_width(gui::nuklearCtx)) / 5;
        nk_layout_row_dynamic(gui::nuklearCtx, skinPrefBoxSize, 4);

        void* loadedTex = skins_cache::weaponSkins[2577].Get();
		if (loadedTex)
			DrawWeaponSkinButton(gui::nuklearCtx, "M9 Bayonet | Ultraviolet", nk_image_ptr(loadedTex));

		void* plusTex = plusSymbol.Get();
		if (plusTex)
			DrawWeaponSkinButton(gui::nuklearCtx, "Add new skin", nk_image_ptr(plusTex));

        //nk_select_image_label(gui::nuklearCtx, nk_image_ptr(loadedTex), "select this", NK_TEXT_ALIGN_CENTERED, false);
    /*static int selected[16] = {1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1};
    nk_layout_row_dynamic(gui::nuklearCtx, skinPrefBoxSize, 5);
    for (int i = 0; i < 16; ++i) {
        if (nk_selectable_label(gui::nuklearCtx, "Z", NK_TEXT_CENTERED, &selected[i])) {
            int x = (i % 4), y = i / 4;
            if (x > 0) selected[i - 1] ^= 1;
            if (x < 3) selected[i + 1] ^= 1;
            if (y > 0) selected[i - 4] ^= 1;
            if (y < 3) selected[i + 4] ^= 1;
        }
    }*/

        nk_group_end(gui::nuklearCtx);
    }
}

void DrawSkinChangerMenu() {
    switch (windowState.currActiveWindow) {
    case Window::SkinsList:
        DrawSkinsOverview();
        break;
    case Window::SingleSkinSettings:

        break;
    }
}