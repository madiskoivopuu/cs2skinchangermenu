#include "pch.h"
#include "components.h"

#include "gui/gui_setup.h"
#include "gui/gui_main.h"
#include "skin_changer/skins_cache.h"
#include "cache.h"

#include "nuklear-gui/nuklear.h"
#include "netvars/fnvhash.h"

enum class Window : int {
    SkinsList,
    SingleSkinSettings
};
struct WindowState {
    Window currActiveWindow = Window::SkinsList;
	SkinPreference* currentlyModifying;
	int selectedStickerID;
	int selectedSkinID;
} windowState;


TextureCache plusSymbol({
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x5A,
	0x08, 0x06, 0x00, 0x00, 0x00, 0xDA, 0x74, 0x5A, 0x7B, 0x00, 0x00, 0x00,
	0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
	0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC,
	0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
	0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00,
	0x00, 0x02, 0xC1, 0x49, 0x44, 0x41, 0x54, 0x78, 0x5E, 0xED, 0x9C, 0xC1,
	0x91, 0xDA, 0x30, 0x14, 0x86, 0x91, 0x0D, 0xB9, 0x71, 0x74, 0x03, 0xB4,
	0x40, 0x03, 0x34, 0x41, 0x19, 0xD4, 0x90, 0xDD, 0x1A, 0x28, 0x83, 0x26,
	0x68, 0xC0, 0x95, 0x70, 0xE4, 0x90, 0x99, 0x04, 0xA4, 0xE8, 0x31, 0xCF,
	0x19, 0xB2, 0xA7, 0x90, 0xDD, 0x7D, 0x1F, 0x3B, 0xFA, 0xBF, 0x19, 0x8D,
	0x31, 0x17, 0x4B, 0x9F, 0x9E, 0x9F, 0x64, 0x8F, 0xE4, 0x99, 0x10, 0x42,
	0x7C, 0x0E, 0xC9, 0x8F, 0xE1, 0xEC, 0xF7, 0xFB, 0xEF, 0xA5, 0x94, 0x17,
	0x3F, 0x0D, 0x21, 0xA5, 0xF4, 0xB2, 0xDB, 0xED, 0x5E, 0xFD, 0x14, 0xA3,
	0xF3, 0xA3, 0x08, 0x44, 0xD2, 0x01, 0x24, 0x1D, 0x40, 0xD2, 0x01, 0x24,
	0x1D, 0x40, 0xD2, 0x01, 0x24, 0x1D, 0x40, 0xD2, 0x01, 0x24, 0x1D, 0x40,
	0xD2, 0x01, 0x24, 0x1D, 0x40, 0xD2, 0x01, 0x5A, 0x94, 0x6E, 0x2F, 0xF9,
	0xB0, 0x17, 0x7D, 0x46, 0x8B, 0xD2, 0x8B, 0x17, 0x8C, 0xA6, 0xA4, 0xE7,
	0x9C, 0x2D, 0xC2, 0xAD, 0xCD, 0x8A, 0xF4, 0x28, 0xBA, 0xAE, 0xC3, 0xA3,
	0xDC, 0x68, 0x31, 0xD2, 0x8D, 0xE6, 0xD2, 0x0B, 0x76, 0x6B, 0xB7, 0x1A,
	0xE9, 0x93, 0x70, 0x44, 0xFC, 0xF5, 0x7A, 0xB5, 0xF6, 0xE2, 0x77, 0x77,
	0x74, 0x05, 0xA6, 0x48, 0x43, 0xA2, 0xAD, 0xEF, 0xFB, 0x5C, 0x0F, 0x56,
	0x50, 0xF0, 0x5E, 0x6F, 0x91, 0x48, 0xE9, 0x76, 0xAD, 0xDE, 0x8F, 0x48,
	0x7A, 0xB9, 0x5C, 0x2E, 0x8B, 0xCD, 0x66, 0x33, 0xF7, 0x53, 0x8C, 0x48,
	0xE9, 0xF7, 0xB7, 0x76, 0xBA, 0x9B, 0x49, 0x34, 0x47, 0x74, 0x7A, 0xB9,
	0xE5, 0xF3, 0x1A, 0x6D, 0x76, 0xDD, 0xE8, 0x6B, 0xDF, 0x38, 0x9F, 0xCF,
	0x78, 0x67, 0x13, 0x0D, 0x2F, 0xC7, 0xE3, 0xF1, 0x52, 0xA7, 0x6F, 0x57,
	0x3F, 0x0F, 0xA3, 0x5E, 0x33, 0xAF, 0x56, 0xAB, 0xE6, 0x06, 0x52, 0x8B,
	0x32, 0x2C, 0xD2, 0xAC, 0xA3, 0x0F, 0x87, 0x43, 0x78, 0x67, 0xBF, 0x25,
	0x3C, 0xBD, 0x6C, 0xB7, 0xDB, 0x6E, 0xBD, 0x5E, 0x2F, 0x7C, 0xCE, 0x1C,
	0x4A, 0x8B, 0x03, 0xE9, 0x8D, 0x1A, 0x69, 0xD3, 0xED, 0x1D, 0x7E, 0xED,
	0x94, 0x52, 0x19, 0x86, 0x61, 0x51, 0x3B, 0xFE, 0x9B, 0xFF, 0x85, 0x10,
	0xDE, 0xF0, 0x4A, 0x19, 0xC7, 0xF1, 0x57, 0x7D, 0x50, 0xB9, 0xF8, 0x79,
	0x18, 0x76, 0xCD, 0xDA, 0xE9, 0x3F, 0x6A, 0xF9, 0xE9, 0x7F, 0x21, 0xFC,
	0xC9, 0xAF, 0xC4, 0x2A, 0xDA, 0x56, 0x78, 0xBB, 0x5A, 0x98, 0x88, 0xF4,
	0xE6, 0x91, 0x74, 0x00, 0x49, 0x07, 0x90, 0x74, 0x00, 0x49, 0x07, 0x90,
	0x74, 0x00, 0x49, 0x07, 0x90, 0x74, 0x00, 0x49, 0x07, 0x90, 0x74, 0x00,
	0x49, 0x07, 0x90, 0x74, 0x00, 0x49, 0x07, 0x90, 0x74, 0x00, 0x49, 0x07,
	0x90, 0x74, 0x00, 0x49, 0x07, 0x90, 0x74, 0x00, 0x49, 0x07, 0x90, 0x74,
	0x00, 0x49, 0x07, 0x90, 0x74, 0x00, 0x49, 0x07, 0x90, 0x74, 0x00, 0x49,
	0x07, 0x90, 0x74, 0x00, 0x6C, 0xD9, 0xB2, 0x3E, 0x86, 0x19, 0xC3, 0x6D,
	0x89, 0xB4, 0x15, 0x5B, 0xAE, 0x4C, 0x2C, 0x95, 0xFE, 0x00, 0xA6, 0xF5,
	0xF5, 0x56, 0xAC, 0xFE, 0xD3, 0x1E, 0xAA, 0x87, 0x88, 0x6C, 0x78, 0x1E,
	0xC7, 0xF1, 0x6A, 0xC5, 0x76, 0x62, 0xF8, 0xF6, 0xC2, 0xAF, 0x44, 0xB2,
	0xB5, 0xF5, 0x35, 0x60, 0x7A, 0x2B, 0x76, 0x5E, 0xCB, 0xFD, 0x3E, 0xAA,
	0x7F, 0x26, 0x3A, 0xDA, 0x72, 0xAD, 0xB8, 0x55, 0xDE, 0x2A, 0xFD, 0xD5,
	0x28, 0xB6, 0x8B, 0xA3, 0x06, 0x8C, 0x15, 0x6B, 0x87, 0xFF, 0xFD, 0x38,
	0xE1, 0xB7, 0xB8, 0x55, 0xFC, 0x74, 0x3A, 0xA5, 0x9A, 0x5E, 0xF0, 0x1D,
	0x11, 0xEF, 0xA1, 0xB6, 0x63, 0xDA, 0x80, 0xFC, 0xF0, 0xB8, 0x18, 0x2E,
	0xBD, 0xD2, 0x3D, 0xC3, 0x0E, 0xB7, 0x77, 0x60, 0xB2, 0xA7, 0xB4, 0xF2,
	0x5F, 0xBB, 0xBF, 0x09, 0xE9, 0x0F, 0x57, 0xF2, 0xA3, 0xC8, 0x39, 0xF7,
	0xCF, 0x90, 0xDA, 0xC2, 0xA5, 0xDB, 0x60, 0xB4, 0x5C, 0x2E, 0xA7, 0x68,
	0x09, 0xA5, 0x4A, 0xBF, 0x4F, 0x0B, 0x18, 0x44, 0x4E, 0xCF, 0xC3, 0x30,
	0x50, 0x0D, 0xB7, 0xD9, 0x07, 0x71, 0x77, 0xFF, 0x05, 0x52, 0x01, 0x13,
	0x4F, 0x4C, 0x19, 0xEB, 0xC3, 0xD1, 0x6D, 0xF6, 0xE1, 0xA7, 0x18, 0x54,
	0xAF, 0x23, 0xDF, 0x06, 0xB0, 0x2D, 0x8D, 0xFE, 0x13, 0x85, 0x92, 0x5E,
	0xFC, 0x2B, 0x43, 0x4D, 0x42, 0x48, 0x37, 0xD9, 0xCD, 0x0A, 0x37, 0xF0,
	0x41, 0x05, 0x00, 0xEF, 0xF0, 0xA6, 0xA4, 0x97, 0x52, 0x6C, 0x1C, 0xC1,
	0x1F, 0xCC, 0x30, 0xE9, 0x1A, 0x48, 0x01, 0x88, 0x81, 0xD4, 0x23, 0x1D,
	0xA7, 0xA9, 0xF4, 0xE2, 0xCF, 0x06, 0xCA, 0xE9, 0x2D, 0xD2, 0x94, 0x74,
	0x1F, 0x47, 0xAC, 0xCD, 0x68, 0x9A, 0xC1, 0xA4, 0x13, 0x03, 0xA9, 0x63,
	0xE9, 0x05, 0x4D, 0x31, 0x94, 0x74, 0x32, 0xD2, 0x9A, 0xCD, 0xE9, 0x89,
	0x98, 0x49, 0x3C, 0xCB, 0xAB, 0x07, 0x2C, 0xBD, 0x3C, 0xCB, 0xF4, 0x8D,
	0x80, 0x92, 0x9E, 0xE7, 0xF3, 0x39, 0xFE, 0x8A, 0x95, 0x02, 0x8B, 0xF4,
	0x96, 0x91, 0x74, 0x00, 0x49, 0x17, 0x42, 0x7C, 0x0A, 0xB3, 0xD9, 0x6F,
	0xAC, 0x42, 0xDD, 0xA8, 0x17, 0x4F, 0x95, 0xCA, 0x00, 0x00, 0x00, 0x00,
	0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
});

// Creates a display name for skin preference.
std::string CreateDisplayName(SkinPreference pref) {
	std::string displayName = "";

	std::optional<CCStrike15ItemDefinition*> itemDef = cache::weaponDefs.FindByKey(pref.weaponID);
	if (itemDef.has_value())
		displayName.append(
			cache::englishTranslations[&itemDef.value()->GetHudTranslationTag()[1]]
		);
	else
		displayName.append("Unknown");

	if (pref.paintKitID != -1) {
		displayName.append(" | ");

		std::optional<CPaintKit*> paintkitDef = cache::paintKits.FindByKey(pref.paintKitID);
		if (paintkitDef.has_value())
			displayName.append(
				cache::englishTranslations[&paintkitDef.value()->paintKitNameTag[1]]
			);
		else
			displayName.append("Unknown");
	}

	return displayName;
}

// Gets the right wear image for the specified wear value
const char* ImageForFloat(float wear) {
	if (wear <= 0.15f)
		return "light";
	else if (wear <= 0.44f)
		return "medium";
	else
		return "heavy";
}

std::string GetImageNameForSkinPreference(SkinPreference pref) {
	std::string imageName = "";

	std::optional<CCStrike15ItemDefinition*> itemDef = cache::weaponDefs.FindByKey(pref.weaponID);
	if (itemDef.has_value())
		imageName.append(
			itemDef.value()->GetSubcategory()
		);

	if (pref.paintKitID != -1) {
		imageName.append("_");

		std::optional<CPaintKit*> paintkitDef = cache::paintKits.FindByKey(pref.paintKitID);
		if (paintkitDef.has_value())
			imageName.append(
				paintkitDef.value()->paintKitName
			);

		imageName.append("_");
		imageName.append(ImageForFloat(pref.wearValue));
	}

	return imageName;
}

void DrawSingleSkinSettings() {
	if (nk_group_begin(gui::nuklearCtx, "singleskin", 0)) {
		nk_layout_row_dynamic(gui::nuklearCtx, 25, 1);

		nk_layout_row_begin(gui::nuklearCtx, NK_DYNAMIC, nk_window_get_height(gui::nuklearCtx)*0.95, 2);
		nk_layout_row_push(gui::nuklearCtx, 0.3f);
		// LEFT SIDE DRAWING | skin, 4 stickers
		if (nk_group_begin(gui::nuklearCtx, "skinandstickers", 0)) {
			struct nk_rect bounds = nk_layout_widget_bounds(gui::nuklearCtx);
			nk_layout_row_dynamic(gui::nuklearCtx, bounds.w, 1);

			std::string weaponTextureName = GetImageNameForSkinPreference(*windowState.currentlyModifying);
			TextureCache& weaponTexture = skins_cache::weaponSkins[fnv::Hash(weaponTextureName.c_str())];

			DrawWeaponSkinBox(gui::nuklearCtx, weaponTexture.Get(), weaponTexture.Width(), weaponTexture.Height());

			nk_group_end(gui::nuklearCtx);
		}

		// RIGHT SIDE DRAWING | skin choice, stattrak, wear, float, name
		nk_layout_row_push(gui::nuklearCtx, 0.70f);
		nk_label(gui::nuklearCtx, "nub", NK_TEXT_ALIGN_CENTERED);

		nk_layout_row_end(gui::nuklearCtx);
		nk_group_end(gui::nuklearCtx);
	}
}

void DrawSkinsOverview() {
    if (nk_group_begin(gui::nuklearCtx, "skinsmenu", 0)) {
        // 5 rectangular items per row
        float skinPrefBoxSize = (0.75f * nk_window_get_width(gui::nuklearCtx)) / 5;
        nk_layout_row_dynamic(gui::nuklearCtx, skinPrefBoxSize, 4);

		for (SkinPreference& pref : skins_cache::loadoutAllPresets) {
			std::string displayName = CreateDisplayName(pref);
			std::string weaponTextureName = GetImageNameForSkinPreference(pref);

			TextureCache& loadedTex = skins_cache::weaponSkins[fnv::Hash(weaponTextureName.c_str())];
			if (DrawWeaponSkinButton(gui::nuklearCtx, displayName, loadedTex.Get(), loadedTex.Width(), loadedTex.Height())) {
				windowState.currActiveWindow = Window::SingleSkinSettings;
				windowState.currentlyModifying = &pref;
			}
		}

		if(DrawWeaponSkinButton(gui::nuklearCtx, "Add new skin", plusSymbol.Get(), plusSymbol.Width(), plusSymbol.Height())) {
			SkinPreference pref = { };
			skins_cache::loadoutAllPresets.push_back(pref);

			windowState.currActiveWindow = Window::SingleSkinSettings;
			windowState.currentlyModifying = &skins_cache::loadoutAllPresets.back();
		}

        nk_group_end(gui::nuklearCtx);
    }
}

void DrawSkinChangerMenu() {
    switch (windowState.currActiveWindow) {
    case Window::SkinsList:
        DrawSkinsOverview();
        break;
    case Window::SingleSkinSettings:
		DrawSingleSkinSettings();
        break;
    }
}